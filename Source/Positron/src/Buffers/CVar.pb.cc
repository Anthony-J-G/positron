// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CVar.proto

#include "CVar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace positron {
PROTOBUF_CONSTEXPR ConsoleVariable::ConsoleVariable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.boolean_value_)*/false
  , /*decltype(_impl_.uint64_value_)*/uint64_t{0u}
  , /*decltype(_impl_.uint32_value_)*/0u
  , /*decltype(_impl_.sint32_value_)*/0
  , /*decltype(_impl_.sint64_value_)*/int64_t{0}
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.float_value_)*/0} {}
struct ConsoleVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsoleVariableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsoleVariableDefaultTypeInternal() {}
  union {
    ConsoleVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsoleVariableDefaultTypeInternal _ConsoleVariable_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cvars_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace positron
static ::_pb::Metadata file_level_metadata_CVar_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CVar_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CVar_2eproto = nullptr;

const uint32_t TableStruct_CVar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.boolean_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.uint32_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.uint64_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.sint32_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.sint64_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.float_value_),
  PROTOBUF_FIELD_OFFSET(::positron::ConsoleVariable, _impl_.string_value_),
  0,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  9,
  1,
  PROTOBUF_FIELD_OFFSET(::positron::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::positron::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::positron::Config, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::positron::Config, _impl_.database_path_),
  PROTOBUF_FIELD_OFFSET(::positron::Config, _impl_.cvars_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::positron::ConsoleVariable)},
  { 26, 35, -1, sizeof(::positron::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::positron::_ConsoleVariable_default_instance_._instance,
  &::positron::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_CVar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nCVar.proto\022\010positron\"\275\003\n\017ConsoleVariab"
  "le\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022%\n\004type\030\002 \001(\0162\022.po"
  "sitron.CVarTypeH\001\210\001\001\022\032\n\rboolean_value\030\003 "
  "\001(\010H\002\210\001\001\022\031\n\014uint32_value\030\004 \001(\rH\003\210\001\001\022\031\n\014u"
  "int64_value\030\005 \001(\004H\004\210\001\001\022\031\n\014sint32_value\030\006"
  " \001(\021H\005\210\001\001\022\031\n\014sint64_value\030\007 \001(\022H\006\210\001\001\022\031\n\014"
  "double_value\030\010 \001(\001H\007\210\001\001\022\030\n\013float_value\030\t"
  " \001(\002H\010\210\001\001\022\031\n\014string_value\030\n \001(\tH\t\210\001\001B\007\n\005"
  "_nameB\007\n\005_typeB\020\n\016_boolean_valueB\017\n\r_uin"
  "t32_valueB\017\n\r_uint64_valueB\017\n\r_sint32_va"
  "lueB\017\n\r_sint64_valueB\017\n\r_double_valueB\016\n"
  "\014_float_valueB\017\n\r_string_value\"\202\001\n\006Confi"
  "g\022\024\n\007version\030\001 \001(\tH\000\210\001\001\022\032\n\rdatabase_path"
  "\030\003 \001(\tH\001\210\001\001\022(\n\005cvars\030\002 \003(\0132\031.positron.Co"
  "nsoleVariableB\n\n\010_versionB\020\n\016_database_p"
  "ath*\252\001\n\010CVarType\022\020\n\014CVar_Boolean\020\000\022\026\n\022CV"
  "ar_UnsignedInt32\020\001\022\026\n\022CVar_UnsignedInt64"
  "\020\002\022\024\n\020CVar_SignedInt32\020\003\022\024\n\020CVar_SignedI"
  "nt64\020\004\022\017\n\013CVar_Double\020\005\022\016\n\nCVar_Float\020\006\022"
  "\017\n\013CVar_String\020\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_CVar_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CVar_2eproto = {
    false, false, 784, descriptor_table_protodef_CVar_2eproto,
    "CVar.proto",
    &descriptor_table_CVar_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_CVar_2eproto::offsets,
    file_level_metadata_CVar_2eproto, file_level_enum_descriptors_CVar_2eproto,
    file_level_service_descriptors_CVar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CVar_2eproto_getter() {
  return &descriptor_table_CVar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CVar_2eproto(&descriptor_table_CVar_2eproto);
namespace positron {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CVarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CVar_2eproto);
  return file_level_enum_descriptors_CVar_2eproto[0];
}
bool CVarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ConsoleVariable::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsoleVariable>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint32_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sint32_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sint64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConsoleVariable::ConsoleVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:positron.ConsoleVariable)
}
ConsoleVariable::ConsoleVariable(const ConsoleVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsoleVariable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.boolean_value_){}
    , decltype(_impl_.uint64_value_){}
    , decltype(_impl_.uint32_value_){}
    , decltype(_impl_.sint32_value_){}
    , decltype(_impl_.sint64_value_){}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.float_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.float_value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.float_value_));
  // @@protoc_insertion_point(copy_constructor:positron.ConsoleVariable)
}

inline void ConsoleVariable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.boolean_value_){false}
    , decltype(_impl_.uint64_value_){uint64_t{0u}}
    , decltype(_impl_.uint32_value_){0u}
    , decltype(_impl_.sint32_value_){0}
    , decltype(_impl_.sint64_value_){int64_t{0}}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.float_value_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsoleVariable::~ConsoleVariable() {
  // @@protoc_insertion_point(destructor:positron.ConsoleVariable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsoleVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.string_value_.Destroy();
}

void ConsoleVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsoleVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:positron.ConsoleVariable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sint64_value_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.sint64_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.float_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsoleVariable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "positron.ConsoleVariable.name"));
        } else
          goto handle_unusual;
        continue;
      // optional .positron.CVarType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::positron::CVarType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bool boolean_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_boolean_value(&has_bits);
          _impl_.boolean_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uint32_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uint32_value(&has_bits);
          _impl_.uint32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint64_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uint64_value(&has_bits);
          _impl_.uint64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 sint32_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sint32_value(&has_bits);
          _impl_.sint32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 sint64_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sint64_value(&has_bits);
          _impl_.sint64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float float_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_float_value(&has_bits);
          _impl_.float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "positron.ConsoleVariable.string_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsoleVariable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:positron.ConsoleVariable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "positron.ConsoleVariable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .positron.CVarType type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional bool boolean_value = 3;
  if (_internal_has_boolean_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boolean_value(), target);
  }

  // optional uint32 uint32_value = 4;
  if (_internal_has_uint32_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32_value(), target);
  }

  // optional uint64 uint64_value = 5;
  if (_internal_has_uint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64_value(), target);
  }

  // optional sint32 sint32_value = 6;
  if (_internal_has_sint32_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_sint32_value(), target);
  }

  // optional sint64 sint64_value = 7;
  if (_internal_has_sint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(7, this->_internal_sint64_value(), target);
  }

  // optional double double_value = 8;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_double_value(), target);
  }

  // optional float float_value = 9;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_float_value(), target);
  }

  // optional string string_value = 10;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "positron.ConsoleVariable.string_value");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:positron.ConsoleVariable)
  return target;
}

size_t ConsoleVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:positron.ConsoleVariable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string string_value = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .positron.CVarType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool boolean_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 uint64_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64_value());
    }

    // optional uint32 uint32_value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uint32_value());
    }

    // optional sint32 sint32_value = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32_value());
    }

    // optional sint64 sint64_value = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double double_value = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional float float_value = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsoleVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsoleVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsoleVariable::GetClassData() const { return &_class_data_; }


void ConsoleVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsoleVariable*>(&to_msg);
  auto& from = static_cast<const ConsoleVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:positron.ConsoleVariable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.boolean_value_ = from._impl_.boolean_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.uint64_value_ = from._impl_.uint64_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uint32_value_ = from._impl_.uint32_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sint32_value_ = from._impl_.sint32_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sint64_value_ = from._impl_.sint64_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.float_value_ = from._impl_.float_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsoleVariable::CopyFrom(const ConsoleVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:positron.ConsoleVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsoleVariable::IsInitialized() const {
  return true;
}

void ConsoleVariable::InternalSwap(ConsoleVariable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsoleVariable, _impl_.float_value_)
      + sizeof(ConsoleVariable::_impl_.float_value_)
      - PROTOBUF_FIELD_OFFSET(ConsoleVariable, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsoleVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CVar_2eproto_getter, &descriptor_table_CVar_2eproto_once,
      file_level_metadata_CVar_2eproto[0]);
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:positron.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cvars_){from._impl_.cvars_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.database_path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_path()) {
    _this->_impl_.database_path_.Set(from._internal_database_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:positron.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cvars_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.database_path_){}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:positron.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cvars_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.database_path_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:positron.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cvars_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "positron.Config.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .positron.ConsoleVariable cvars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string database_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_database_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "positron.Config.database_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:positron.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string version = 1;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "positron.Config.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .positron.ConsoleVariable cvars = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cvars_size()); i < n; i++) {
    const auto& repfield = this->_internal_cvars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string database_path = 3;
  if (_internal_has_database_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_path().data(), static_cast<int>(this->_internal_database_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "positron.Config.database_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_database_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:positron.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:positron.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .positron.ConsoleVariable cvars = 2;
  total_size += 1UL * this->_internal_cvars_size();
  for (const auto& msg : this->_impl_.cvars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string database_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:positron.Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cvars_.MergeFrom(from._impl_.cvars_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database_path(from._internal_database_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:positron.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cvars_.InternalSwap(&other->_impl_.cvars_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_path_, lhs_arena,
      &other->_impl_.database_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CVar_2eproto_getter, &descriptor_table_CVar_2eproto_once,
      file_level_metadata_CVar_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace positron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::positron::ConsoleVariable*
Arena::CreateMaybeMessage< ::positron::ConsoleVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::positron::ConsoleVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::positron::Config*
Arena::CreateMaybeMessage< ::positron::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::positron::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
