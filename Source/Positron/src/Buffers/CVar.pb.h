// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CVar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CVar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CVar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CVar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CVar_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CVar_2eproto;
namespace positron {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConsoleVariable;
struct ConsoleVariableDefaultTypeInternal;
extern ConsoleVariableDefaultTypeInternal _ConsoleVariable_default_instance_;
}  // namespace positron
PROTOBUF_NAMESPACE_OPEN
template<> ::positron::Config* Arena::CreateMaybeMessage<::positron::Config>(Arena*);
template<> ::positron::ConsoleVariable* Arena::CreateMaybeMessage<::positron::ConsoleVariable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace positron {

enum CVarType : int {
  CVar_Boolean = 0,
  CVar_UnsignedInt32 = 1,
  CVar_UnsignedInt64 = 2,
  CVar_SignedInt32 = 3,
  CVar_SignedInt64 = 4,
  CVar_Double = 5,
  CVar_Float = 6,
  CVar_String = 7,
  CVarType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CVarType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CVarType_IsValid(int value);
constexpr CVarType CVarType_MIN = CVar_Boolean;
constexpr CVarType CVarType_MAX = CVar_String;
constexpr int CVarType_ARRAYSIZE = CVarType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CVarType_descriptor();
template<typename T>
inline const std::string& CVarType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CVarType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CVarType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CVarType_descriptor(), enum_t_value);
}
inline bool CVarType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CVarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CVarType>(
    CVarType_descriptor(), name, value);
}
// ===================================================================

class ConsoleVariable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:positron.ConsoleVariable) */ {
 public:
  inline ConsoleVariable() : ConsoleVariable(nullptr) {}
  ~ConsoleVariable() override;
  explicit PROTOBUF_CONSTEXPR ConsoleVariable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsoleVariable(const ConsoleVariable& from);
  ConsoleVariable(ConsoleVariable&& from) noexcept
    : ConsoleVariable() {
    *this = ::std::move(from);
  }

  inline ConsoleVariable& operator=(const ConsoleVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsoleVariable& operator=(ConsoleVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsoleVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsoleVariable* internal_default_instance() {
    return reinterpret_cast<const ConsoleVariable*>(
               &_ConsoleVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsoleVariable& a, ConsoleVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsoleVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsoleVariable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsoleVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsoleVariable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsoleVariable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsoleVariable& from) {
    ConsoleVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsoleVariable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "positron.ConsoleVariable";
  }
  protected:
  explicit ConsoleVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringValueFieldNumber = 10,
    kTypeFieldNumber = 2,
    kBooleanValueFieldNumber = 3,
    kUint64ValueFieldNumber = 5,
    kUint32ValueFieldNumber = 4,
    kSint32ValueFieldNumber = 6,
    kSint64ValueFieldNumber = 7,
    kDoubleValueFieldNumber = 8,
    kFloatValueFieldNumber = 9,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string string_value = 10;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional .positron.CVarType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::positron::CVarType type() const;
  void set_type(::positron::CVarType value);
  private:
  ::positron::CVarType _internal_type() const;
  void _internal_set_type(::positron::CVarType value);
  public:

  // optional bool boolean_value = 3;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // optional uint64 uint64_value = 5;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // optional uint32 uint32_value = 4;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // optional sint32 sint32_value = 6;
  bool has_sint32_value() const;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  int32_t sint32_value() const;
  void set_sint32_value(int32_t value);
  private:
  int32_t _internal_sint32_value() const;
  void _internal_set_sint32_value(int32_t value);
  public:

  // optional sint64 sint64_value = 7;
  bool has_sint64_value() const;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  int64_t sint64_value() const;
  void set_sint64_value(int64_t value);
  private:
  int64_t _internal_sint64_value() const;
  void _internal_set_sint64_value(int64_t value);
  public:

  // optional double double_value = 8;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional float float_value = 9;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:positron.ConsoleVariable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    int type_;
    bool boolean_value_;
    uint64_t uint64_value_;
    uint32_t uint32_value_;
    int32_t sint32_value_;
    int64_t sint64_value_;
    double double_value_;
    float float_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CVar_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:positron.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "positron.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCvarsFieldNumber = 2,
    kVersionFieldNumber = 1,
    kDatabasePathFieldNumber = 3,
  };
  // repeated .positron.ConsoleVariable cvars = 2;
  int cvars_size() const;
  private:
  int _internal_cvars_size() const;
  public:
  void clear_cvars();
  ::positron::ConsoleVariable* mutable_cvars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::positron::ConsoleVariable >*
      mutable_cvars();
  private:
  const ::positron::ConsoleVariable& _internal_cvars(int index) const;
  ::positron::ConsoleVariable* _internal_add_cvars();
  public:
  const ::positron::ConsoleVariable& cvars(int index) const;
  ::positron::ConsoleVariable* add_cvars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::positron::ConsoleVariable >&
      cvars() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string database_path = 3;
  bool has_database_path() const;
  private:
  bool _internal_has_database_path() const;
  public:
  void clear_database_path();
  const std::string& database_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_path();
  PROTOBUF_NODISCARD std::string* release_database_path();
  void set_allocated_database_path(std::string* database_path);
  private:
  const std::string& _internal_database_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_path(const std::string& value);
  std::string* _internal_mutable_database_path();
  public:

  // @@protoc_insertion_point(class_scope:positron.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::positron::ConsoleVariable > cvars_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CVar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsoleVariable

// optional string name = 1;
inline bool ConsoleVariable::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConsoleVariable::has_name() const {
  return _internal_has_name();
}
inline void ConsoleVariable::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConsoleVariable::name() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsoleVariable::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.name)
}
inline std::string* ConsoleVariable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:positron.ConsoleVariable.name)
  return _s;
}
inline const std::string& ConsoleVariable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConsoleVariable::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsoleVariable::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsoleVariable::release_name() {
  // @@protoc_insertion_point(field_release:positron.ConsoleVariable.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConsoleVariable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:positron.ConsoleVariable.name)
}

// optional .positron.CVarType type = 2;
inline bool ConsoleVariable::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConsoleVariable::has_type() const {
  return _internal_has_type();
}
inline void ConsoleVariable::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::positron::CVarType ConsoleVariable::_internal_type() const {
  return static_cast< ::positron::CVarType >(_impl_.type_);
}
inline ::positron::CVarType ConsoleVariable::type() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.type)
  return _internal_type();
}
inline void ConsoleVariable::_internal_set_type(::positron::CVarType value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void ConsoleVariable::set_type(::positron::CVarType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.type)
}

// optional bool boolean_value = 3;
inline bool ConsoleVariable::_internal_has_boolean_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConsoleVariable::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void ConsoleVariable::clear_boolean_value() {
  _impl_.boolean_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConsoleVariable::_internal_boolean_value() const {
  return _impl_.boolean_value_;
}
inline bool ConsoleVariable::boolean_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.boolean_value)
  return _internal_boolean_value();
}
inline void ConsoleVariable::_internal_set_boolean_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.boolean_value_ = value;
}
inline void ConsoleVariable::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.boolean_value)
}

// optional uint32 uint32_value = 4;
inline bool ConsoleVariable::_internal_has_uint32_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConsoleVariable::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void ConsoleVariable::clear_uint32_value() {
  _impl_.uint32_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ConsoleVariable::_internal_uint32_value() const {
  return _impl_.uint32_value_;
}
inline uint32_t ConsoleVariable::uint32_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.uint32_value)
  return _internal_uint32_value();
}
inline void ConsoleVariable::_internal_set_uint32_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.uint32_value_ = value;
}
inline void ConsoleVariable::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.uint32_value)
}

// optional uint64 uint64_value = 5;
inline bool ConsoleVariable::_internal_has_uint64_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConsoleVariable::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void ConsoleVariable::clear_uint64_value() {
  _impl_.uint64_value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ConsoleVariable::_internal_uint64_value() const {
  return _impl_.uint64_value_;
}
inline uint64_t ConsoleVariable::uint64_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.uint64_value)
  return _internal_uint64_value();
}
inline void ConsoleVariable::_internal_set_uint64_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.uint64_value_ = value;
}
inline void ConsoleVariable::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.uint64_value)
}

// optional sint32 sint32_value = 6;
inline bool ConsoleVariable::_internal_has_sint32_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConsoleVariable::has_sint32_value() const {
  return _internal_has_sint32_value();
}
inline void ConsoleVariable::clear_sint32_value() {
  _impl_.sint32_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ConsoleVariable::_internal_sint32_value() const {
  return _impl_.sint32_value_;
}
inline int32_t ConsoleVariable::sint32_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.sint32_value)
  return _internal_sint32_value();
}
inline void ConsoleVariable::_internal_set_sint32_value(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sint32_value_ = value;
}
inline void ConsoleVariable::set_sint32_value(int32_t value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.sint32_value)
}

// optional sint64 sint64_value = 7;
inline bool ConsoleVariable::_internal_has_sint64_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConsoleVariable::has_sint64_value() const {
  return _internal_has_sint64_value();
}
inline void ConsoleVariable::clear_sint64_value() {
  _impl_.sint64_value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t ConsoleVariable::_internal_sint64_value() const {
  return _impl_.sint64_value_;
}
inline int64_t ConsoleVariable::sint64_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.sint64_value)
  return _internal_sint64_value();
}
inline void ConsoleVariable::_internal_set_sint64_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sint64_value_ = value;
}
inline void ConsoleVariable::set_sint64_value(int64_t value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.sint64_value)
}

// optional double double_value = 8;
inline bool ConsoleVariable::_internal_has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConsoleVariable::has_double_value() const {
  return _internal_has_double_value();
}
inline void ConsoleVariable::clear_double_value() {
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ConsoleVariable::_internal_double_value() const {
  return _impl_.double_value_;
}
inline double ConsoleVariable::double_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.double_value)
  return _internal_double_value();
}
inline void ConsoleVariable::_internal_set_double_value(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.double_value_ = value;
}
inline void ConsoleVariable::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.double_value)
}

// optional float float_value = 9;
inline bool ConsoleVariable::_internal_has_float_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConsoleVariable::has_float_value() const {
  return _internal_has_float_value();
}
inline void ConsoleVariable::clear_float_value() {
  _impl_.float_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ConsoleVariable::_internal_float_value() const {
  return _impl_.float_value_;
}
inline float ConsoleVariable::float_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.float_value)
  return _internal_float_value();
}
inline void ConsoleVariable::_internal_set_float_value(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.float_value_ = value;
}
inline void ConsoleVariable::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.float_value)
}

// optional string string_value = 10;
inline bool ConsoleVariable::_internal_has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConsoleVariable::has_string_value() const {
  return _internal_has_string_value();
}
inline void ConsoleVariable::clear_string_value() {
  _impl_.string_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConsoleVariable::string_value() const {
  // @@protoc_insertion_point(field_get:positron.ConsoleVariable.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsoleVariable::set_string_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.string_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:positron.ConsoleVariable.string_value)
}
inline std::string* ConsoleVariable::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:positron.ConsoleVariable.string_value)
  return _s;
}
inline const std::string& ConsoleVariable::_internal_string_value() const {
  return _impl_.string_value_.Get();
}
inline void ConsoleVariable::_internal_set_string_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsoleVariable::_internal_mutable_string_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.string_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsoleVariable::release_string_value() {
  // @@protoc_insertion_point(field_release:positron.ConsoleVariable.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.string_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_value_.IsDefault()) {
    _impl_.string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConsoleVariable::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.string_value_.SetAllocated(string_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_value_.IsDefault()) {
    _impl_.string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:positron.ConsoleVariable.string_value)
}

// -------------------------------------------------------------------

// Config

// optional string version = 1;
inline bool Config::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_version() const {
  return _internal_has_version();
}
inline void Config::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::version() const {
  // @@protoc_insertion_point(field_get:positron.Config.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:positron.Config.version)
}
inline std::string* Config::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:positron.Config.version)
  return _s;
}
inline const std::string& Config::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Config::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_version() {
  // @@protoc_insertion_point(field_release:positron.Config.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:positron.Config.version)
}

// optional string database_path = 3;
inline bool Config::_internal_has_database_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config::has_database_path() const {
  return _internal_has_database_path();
}
inline void Config::clear_database_path() {
  _impl_.database_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Config::database_path() const {
  // @@protoc_insertion_point(field_get:positron.Config.database_path)
  return _internal_database_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_database_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.database_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:positron.Config.database_path)
}
inline std::string* Config::mutable_database_path() {
  std::string* _s = _internal_mutable_database_path();
  // @@protoc_insertion_point(field_mutable:positron.Config.database_path)
  return _s;
}
inline const std::string& Config::_internal_database_path() const {
  return _impl_.database_path_.Get();
}
inline void Config::_internal_set_database_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.database_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_database_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.database_path_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_database_path() {
  // @@protoc_insertion_point(field_release:positron.Config.database_path)
  if (!_internal_has_database_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.database_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_path_.IsDefault()) {
    _impl_.database_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_database_path(std::string* database_path) {
  if (database_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.database_path_.SetAllocated(database_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_path_.IsDefault()) {
    _impl_.database_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:positron.Config.database_path)
}

// repeated .positron.ConsoleVariable cvars = 2;
inline int Config::_internal_cvars_size() const {
  return _impl_.cvars_.size();
}
inline int Config::cvars_size() const {
  return _internal_cvars_size();
}
inline void Config::clear_cvars() {
  _impl_.cvars_.Clear();
}
inline ::positron::ConsoleVariable* Config::mutable_cvars(int index) {
  // @@protoc_insertion_point(field_mutable:positron.Config.cvars)
  return _impl_.cvars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::positron::ConsoleVariable >*
Config::mutable_cvars() {
  // @@protoc_insertion_point(field_mutable_list:positron.Config.cvars)
  return &_impl_.cvars_;
}
inline const ::positron::ConsoleVariable& Config::_internal_cvars(int index) const {
  return _impl_.cvars_.Get(index);
}
inline const ::positron::ConsoleVariable& Config::cvars(int index) const {
  // @@protoc_insertion_point(field_get:positron.Config.cvars)
  return _internal_cvars(index);
}
inline ::positron::ConsoleVariable* Config::_internal_add_cvars() {
  return _impl_.cvars_.Add();
}
inline ::positron::ConsoleVariable* Config::add_cvars() {
  ::positron::ConsoleVariable* _add = _internal_add_cvars();
  // @@protoc_insertion_point(field_add:positron.Config.cvars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::positron::ConsoleVariable >&
Config::cvars() const {
  // @@protoc_insertion_point(field_list:positron.Config.cvars)
  return _impl_.cvars_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace positron

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::positron::CVarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::positron::CVarType>() {
  return ::positron::CVarType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CVar_2eproto
